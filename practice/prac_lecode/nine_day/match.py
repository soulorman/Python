# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

# 有效字符串需满足： 
# 左括号必须用相同类型的右括号闭合。
# 左括号必须以正确的顺序闭合。
# 注意空字符串可被认为是有效字符串。

# 示例 1:
# 输入: "()"
# 输出: true

# 示例 2:
# 输入: "()[]{}"
# 输出: true

# 示例 3:
# 输入: "(]"
# 输出: false

# 示例 4:
# 输入: "([)]"
# 输出: false

# 示例 5:
# 输入: "{[]}"
# 输出: true

# 核心思路  因为有多个符号，所以不能使用数字+-，所以直接用符号本身,一层一层的剥

def test(s):
    # 初始化栈
    stack = []
    # 定义符号类型 注意：定义的时候符号发着来 不然就只能匹配符号大包的时候  比如  ([{}]),如()[]就不算在内
    maphash = {")" : "(", "]" : "[", "}" : "{"}
    
    for cha in s:
        # 判断在不在字典里，如果不在就是字典里的值，比如'('
        if cha in maphash:
            # 弹出栈最后面的值，防止空栈  所以加了个#    
            top = stack.pop() if stack else '#'
            # 判断弹出的值是否是字典里的值(不是key),
            if maphash[cha] != top:
                return False
        # 不在的话 入栈操作
        else:
            stack.append(cha)
       
        # stack = ['('] ... stack = ['(','[']
    return not stack

s = "{[]}"
print(test(s))
