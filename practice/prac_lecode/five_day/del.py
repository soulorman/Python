# 有效括号字符串为空 ("")、"(" + A + ")" 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
# 如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

# 给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语
# 对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 

# 示例 1：
# 输入："(()())(())"
# 输出："()()()"
# 解释：
# 输入字符串为 "(()())(())"，原语化分解得到 "(()())" + "(())"，
# 删除每个部分中的最外层括号后得到 "()()" + "()" = "()()()"。

# 示例 2：
# 输入："(()())(())(()(()))"
# 输出："()()()()(())"
# 解释：
# 输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
# 删除每隔部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。

# 示例 3：
# 输入："()()"
# 输出：""
# 解释：
# 输入字符串为 "()()"，原语化分解得到 "()" + "()"，
# 删除每个部分中的最外层括号后得到 "" + "" = ""

# 提示：
# S.length <= 10000
# S[i] 为 "(" 或 ")"
# S 是一个有效括号字符串

# 思路
# 其实就是栈，碰到(就入栈1，碰到)就出栈1，当栈归0的时候就是一个原语，然后记录下开始和结束的位置，删除这个元素

# encoding: utf-8


def test(s):
    #初始化开始和结束的位置
    start = 0
    end = 0
    
    # 初始化栈
    stack = 0
    ans = ''

    # 需要定个flag表示第一个开始
    flag = False

    for index,i in enumerate(s):
        if i == '(':
            stack += 1
            if not flag:
                start = index
                flag = True

        elif i == ')':
            stack -= 1
            if stack == 0:
                end = index
                ans += s[start+1:end]
                #s = s.replace(s[start],'').replace(s[end],'')
                flag = False
                start = end
    return ans


s = "(()())(())"
print(test(s)
